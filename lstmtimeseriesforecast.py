# -*- coding: utf-8 -*-
"""LSTMTimeSeriesForecast.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cxhMfxnUpcunfnisaaBc47m8xC5NR5Dc
"""

import tensorflow as tf
import os
import pandas as pd
import numpy as np

zip_path = tf.keras.utils.get_file(
    origin='https://storage.googleapis.com/tensorflow/tf-keras-datasets/jena_climate_2009_2016.csv.zip',
    fname='jena_climate_2009_2016.csv.zip',
    extract=True)
csv_path, _ = os.path.splitext(zip_path)

df = pd.read_csv(csv_path)
df

df = df[5::6]
df

df.index = pd.to_datetime(df['Date Time'], format='%d.%m.%Y %H:%M:%S')
df[:26]

temp = df['T (degC)']
temp.plot()

def df_to_x_y(df, windows_size=5):
  df_as_np = df.to_numpy()
  x = []
  y = []
  for i in range(len(df_as_np)-windows_size):
    row = [[a] for a in df_as_np[i:i+windows_size]]
    x.append(row)
    label = df_as_np[i+windows_size]
    y.append(label)
  return np.array(x), np.array(y)

WINDOWS_SIZE=5
x, y = df_to_x_y(temp, WINDOWS_SIZE)
x.shape, y.shape

x_train, y_train = x[:60000], y[:60000]
x_val, y_val = x[60000:65000], y[60000:65000]
x_test, y_test = x[65000:], y[65000:]
x_train.shape, y_train.shape, x_val.shape, y_val.shape, x_test.shape, y_test.shape

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import *
from tensorflow.keras.callbacks import ModelCheckpoint
from tensorflow.keras.losses import MeanSquaredError
from tensorflow.keras.metrics import RootMeanSquaredError
from tensorflow.keras.optimizers import Adam

model1 = Sequential()
model1.add(InputLayer((5,1)))
model1.add(LSTM(64))
model1.add(Dense(8, 'relu'))
model1.add(Dense(1, 'linear'))

model1.summary()

cp = ModelCheckpoint('model1/', seave_best_only=True)
model1.compile(loss=MeanSquaredError(), optimizer=Adam(learning_rate=0.0001), metrics=[RootMeanSquaredError()])

model1.fit(x_train, y_train, validation_data=(x_val, y_val), epochs=10, callbacks=[cp])

from tensorflow.keras.models import load_model
model1 = load_model('model1/')

train_predictions = model1.predict(x_train).flatten()
train_results = pd.DataFrame(data={'Train Predictions':train_predictions, 'Actuals':y_train})
train_results

import matplotlib.pyplot as plt
plt.plot(train_results['Train Predictions'][50:100])
plt.plot(train_results['Actuals'][50:100])

val_predictions = model1.predict(x_val).flatten()
val_results = pd.DataFrame(data={'Val Predictions':val_predictions, 'Actuals':y_val})
val_results

plt.plot(val_results['Val Predictions'][50:100])
plt.plot(val_results['Actuals'][50:100])

test_predictions = model1.predict(x_test).flatten()
test_results = pd.DataFrame(data={'Test Predictions':test_predictions, 'Actuals':y_test})
test_results

plt.plot(test_results['Test Predictions'][50:100])
plt.plot(test_results['Actuals'][50:100])